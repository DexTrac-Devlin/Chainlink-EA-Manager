#!/bin/bash

########################################################
#                Formatting Variables                  #
########################################################
b=$(tput bold)
n=$(tput sgr0)
un=$(tput smul)
nun=$(tput rmul)

########################################################
#                      Variables                       #
########################################################
# Get IP address in a cross-platform way
if [[ "$(uname)" == "Darwin" ]]; then
  # macOS
  IP_ADDRESS=$(ifconfig | grep "inet " | grep -v 127.0.0.1 | awk '{print $2}' | head -n 1)
else
  # Linux
  IP_ADDRESS=$(ip route get 1.2.3.4 | awk '{print $7}')
fi
VERSION="0.0.3"

# Grab API keys from flat file
source api_keys
# Grab Container names from flat file
if [[ -f ~/.profile ]]; then
  source ~/.profile
elif [[ -f ~/.bash_profile && "$(uname)" == "Darwin" ]]; then
  source ~/.bash_profile
fi

# $1 --> option (--deploy)
# $2 --> external adapter name (--coingekco)
# $3 --> specific version for external adapter (0.1.4)

########################################################
#                 INITIALIZE FUNCTION                  #
########################################################
Initialize() {
# Initializes a new Docker environment
  echo "${b}Initializing new Docker environment...${n}"

  # Check if Docker is installed and install it if needed
  if ! command -v docker &> /dev/null; then
    echo "${b}Docker not found. Installing Docker...${n}"
    
    # Detect OS
    if [[ "$(uname)" == "Darwin" ]]; then
      # macOS - use Homebrew
      if ! command -v brew &> /dev/null; then
        echo "${b}Homebrew not found. Please install Homebrew first:${n}"
        echo "https://brew.sh/"
        exit 1
      fi
      
      echo "${b}Installing Docker Desktop for Mac...${n}"
      brew install --cask docker
      
      echo "${b}Docker installed. Please open Docker Desktop manually and complete the setup.${n}"
      echo "${b}After Docker is running, please run this script again.${n}"
      exit 0
    else
      # Linux
      if [ "$EUID" -ne 0 ]; then
        echo "${b}Run as elevated user (sudo)${n}"
        exit 1
      fi
      
      read -p "${b}Enter your non-root username:${n} " USERNAME
      
      apt=`command -v apt-get`
      yum=`command -v yum`
      
      if [ -n "$apt" ]; then
        echo "apt detected"
        echo "${b}Updating apt & Installing Docker-CE${n}"
        apt-get -y update >>/dev/null 2>&1
        apt-get install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common >>/dev/null 2>&1
        curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add - >>/dev/null 2>&1
        add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable" >>/dev/null 2>&1
        apt-get -y update >>/dev/null 2>&1
        apt-get -y install docker-ce >>/dev/null 2>&1
        groupadd docker >>/dev/null 2>&1
        sudo usermod -aG docker $USERNAME >>/dev/null 2>&1
      elif [ -n "$yum" ]; then
        echo "yum detected"
        echo "Updating yum"
        echo "Installing dependencies & Docker-CE"
        sudo yum remove docker* >>/dev/null 2>&1
        sudo yum -y update >>/dev/null 2>&1
        sudo yum -y remove docker* >>/dev/null 2>&1
        sudo yum -y install yum-utils >>/dev/null 2>&1
        sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo >>/dev/null 2>&1
        sudo yum -y install docker-ce docker-ce-cli containerd.io >>/dev/null 2>&1
        sudo systemctl start docker >>/dev/null 2>&1
        groupadd docker >>/dev/null 2>&1
        sudo usermod -aG docker $USERNAME >>/dev/null 2>&1
        sudo curl -L "https://github.com/docker/compose/releases/download/1.26.0/docker-compose-\$(uname -s)-\$(uname -m)" -o /usr/local/bin/docker-compose >>/dev/null 2>&1
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version
        sudo dnf install git -y
      else
        echo "Err: apt or yum not detected.";
        exit 1;
      fi
    fi
  fi

  # Check if Docker is running
  if ! docker info &> /dev/null; then
    echo "${b}Docker is not running. Please start Docker and try again.${n}"
    exit 1
  fi

  # create docker network
  echo "${b}Creating Docker network...${n}"
  if ! docker network inspect eas-net &> /dev/null; then
    # Create the docker network - same configuration for both Mac and Linux
    docker network create \
    --driver=bridge \
    --subnet=192.168.0.0/16 \
    --gateway=192.168.0.1 \
    eas-net
  else
    echo "${b}Network eas-net already exists${n}"
  fi

  # create directory to use for redis volume
  if [ ! -d ~/.redis ]; then
    echo "${b}Creating Redis directory...${n}"
    mkdir -p ~/.redis
  fi

  # deploy redis container
  echo ""
  echo "${b}Redis volume located at ~/.redis${n}"
  if ! docker ps -a | grep -q redis-cache; then
    docker run \
    --name redis-cache \
    --restart=unless-stopped \
    --net eas-net \
    --ip=192.168.1.1 \
    -p 6379:6379 \
    -v ~/.redis:/data \
    -d redis redis-server --maxclients 2500
  else
    echo "${b}Redis container already exists${n}"
    if ! docker ps | grep -q redis-cache; then
      echo "${b}Starting existing Redis container...${n}"
      docker start redis-cache
    fi
  fi

  # Provide Redis container information
  echo ""
  echo "${b}Redis container info:${n}"
  echo "containerName: redis-cache"
  echo "IPaddress: 192.168.1.1"
  echo "listnPort: 6379"

  # Copy eaManager script to PATH
  echo ""
  echo "Adding eaManager to PATH"
  
  if [[ "$(uname)" == "Darwin" ]]; then
    # macOS - copy to /usr/local/bin which is in PATH and doesn't require sudo
    cp eaManager /usr/local/bin/eaManager
    chmod +x /usr/local/bin/eaManager
  else
    # Linux
    sudo cp eaManager /usr/bin/eaManager
    sudo chmod +x /usr/bin/eaManager
  fi
}

########################################################
#                    DEPLOY FUNCTION                   #
########################################################
Deploy() {
  # Check if skopeo is installed, if not, install it
  if ! command -v skopeo &> /dev/null; then
    echo "skopeo could not be found, installing..."
    
    if [[ "$(uname)" == "Darwin" ]]; then
      # macOS installation via Homebrew
      if ! command -v brew &> /dev/null; then
        echo "${b}Homebrew not found. Please install Homebrew first:${n}"
        echo "https://brew.sh/"
        exit 1
      fi
      brew install skopeo
    else
      # Linux installation
      apt=`command -v apt-get`
      yum=`command -v yum`
      
      if [ -n "$apt" ]; then
        # Debian/Ubuntu
        sudo apt-get update && sudo apt-get install -y skopeo
      elif [ -n "$yum" ]; then
        # RHEL/CentOS
        sudo yum install -y skopeo
      else
        echo "Err: apt or yum not detected."
        exit 1
      fi
    fi
  fi

  # Check if jq is installed (required for parsing JSON)
  if ! command -v jq &> /dev/null; then
    echo "jq could not be found, installing..."
    
    if [[ "$(uname)" == "Darwin" ]]; then
      # macOS installation via Homebrew
      brew install jq
    else
      # Linux installation
      apt=`command -v apt-get`
      yum=`command -v yum`
      
      if [ -n "$apt" ]; then
        # Debian/Ubuntu
        sudo apt-get update && sudo apt-get install -y jq
      elif [ -n "$yum" ]; then
        # RHEL/CentOS
        sudo yum install -y jq
      else
        echo "Err: apt or yum not detected."
        exit 1
      fi
    fi
  fi

  # Fetch available tags using skopeo
  local repo="public.ecr.aws/chainlink/adapters/$1-adapter"
  local tags
  local tag_list
  local selected_tag

  echo "Fetching available tags for $1-adapter..."
  tags=$(skopeo list-tags "docker://$repo" | jq -r '.Tags[]' | sort -Vr | head -n 10)

  if [[ -z "$tags" ]]; then
    echo "No tags found for repository: $repo"
    exit 1
  fi

  # Display the tags and prompt the user for selection
  echo "Available tags for $repo:"
  tag_list=($tags)  # Convert tags into an array

  for i in "${!tag_list[@]}"; do
    echo "$i) ${tag_list[$i]}"
  done

  read -p "Select a tag (0-${#tag_list[@]}): " selected_index

  # Validate input and assign the selected tag
  if [[ "$selected_index" =~ ^[0-9]+$ ]] && [[ "$selected_index" -ge 0 ]] && [[ "$selected_index" -lt "${#tag_list[@]}" ]]; then
    selected_tag="${tag_list[$selected_index]}"
    echo "Selected tag: $selected_tag"
  else
    echo "Invalid selection."
    exit 1
  fi

  # Ensure selected_tag is not empty
  if [ -z "$selected_tag" ]; then
    echo "No tag selected, exiting."
    exit 1
  fi

  # Deploy the external adapter with the selected version using the corresponding bash script
  echo "Deploying $1 at version $selected_tag"

  # Ensure the script exists before attempting to execute it
  local deploy_script="externalAdapters/$1"
  if [[ ! -f "$deploy_script" ]]; then
    echo "Deployment script $deploy_script not found."
    exit 1
  fi
  
  # Make script executable if it's not already
  chmod +x "$deploy_script"

  # Run the deployment script with the selected tag
  bash "$deploy_script" "$selected_tag"
}

########################################################
#                  UPGRADE FUNCTION                    #
########################################################
Upgrade() {
  # Check if skopeo is installed, if not, install it
  if ! command -v skopeo &> /dev/null; then
    echo "skopeo could not be found, installing..."
    
    if [[ "$(uname)" == "Darwin" ]]; then
      # macOS installation via Homebrew
      if ! command -v brew &> /dev/null; then
        echo "${b}Homebrew not found. Please install Homebrew first:${n}"
        echo "https://brew.sh/"
        exit 1
      fi
      brew install skopeo
    else
      # Linux installation
      apt=`command -v apt-get`
      yum=`command -v yum`
      
      if [ -n "$apt" ]; then
        # Debian/Ubuntu
        sudo apt-get update && sudo apt-get install -y skopeo
      elif [ -n "$yum" ]; then
        # RHEL/CentOS
        sudo yum install -y skopeo
      else
        echo "Err: apt or yum not detected."
        exit 1
      fi
    fi
  fi

  # Check if jq is installed (required for parsing JSON)
  if ! command -v jq &> /dev/null; then
    echo "jq could not be found, installing..."
    
    if [[ "$(uname)" == "Darwin" ]]; then
      # macOS installation via Homebrew
      brew install jq
    else
      # Linux installation
      apt=`command -v apt-get`
      yum=`command -v yum`
      
      if [ -n "$apt" ]; then
        # Debian/Ubuntu
        sudo apt-get update && sudo apt-get install -y jq
      elif [ -n "$yum" ]; then
        # RHEL/CentOS
        sudo yum install -y jq
      else
        echo "Err: apt or yum not detected."
        exit 1
      fi
    fi
  fi

  # Fetch available tags using skopeo
  local repo="public.ecr.aws/chainlink/adapters/$1-adapter"
  local tags
  local tag_list
  local selected_tag

  echo "Fetching available tags for $1-adapter..."
  tags=$(skopeo list-tags "docker://$repo" | jq -r '.Tags[]' | sort -Vr | head -n 10)

  if [[ -z "$tags" ]]; then
    echo "No tags found for repository: $repo"
    exit 1
  fi

  # Display the tags and prompt the user for selection
  echo "Available tags for $repo:"
  tag_list=($tags)  # Convert tags into an array

  for i in "${!tag_list[@]}"; do
    echo "$i) ${tag_list[$i]}"
  done

  read -p "Select a tag (0-${#tag_list[@]}): " selected_index

  # Validate input and assign the selected tag
  if [[ "$selected_index" =~ ^[0-9]+$ ]] && [[ "$selected_index" -ge 0 ]] && [[ "$selected_index" -lt "${#tag_list[@]}" ]]; then
    selected_tag="${tag_list[$selected_index]}"
    echo "Selected tag: $selected_tag"
  else
    echo "Invalid selection."
    exit 1
  fi

  # Ensure selected_tag is not empty
  if [ -z "$selected_tag" ]; then
    echo "No tag selected, exiting."
    exit 1
  fi

  # Stop and remove the existing container
  echo "Stopping, removing, and redeploying $1 at version $selected_tag"
  docker stop "$1-redis"
  docker rm "$1-redis"

  # Ensure the script exists before attempting to execute it
  local upgrade_script="externalAdapters/$1"
  if [[ ! -f "$upgrade_script" ]]; then
    echo "Upgrade script $upgrade_script not found."
    exit 1
  fi
  
  # Make script executable if it's not already
  chmod +x "$upgrade_script"

  # Run the upgrade script with the selected tag
  bash "$upgrade_script" "$selected_tag"
}

########################################################
#                  TEST FUNCTION                    #
########################################################
Test() {
# Send test request to EA
bash checkEA "$@"
}

########################################################
#                  VERSION FUNCTION                    #
########################################################
Version() {
# Print Version
echo "eaManager version: ${b}$VERSION${n}"
}

########################################################
#                    LIST FUNCTION                     #
########################################################
List() {
# List EA options
echo "${b}Listing Supported EAs:${n}"
echo ""

# Check if tree command is installed
if ! command -v tree &> /dev/null; then
  echo "tree command not found, installing..."
  
  if [[ "$(uname)" == "Darwin" ]]; then
    # macOS installation via Homebrew
    if ! command -v brew &> /dev/null; then
      echo "${b}Homebrew not found. Please install Homebrew first:${n}"
      echo "https://brew.sh/"
      exit 1
    fi
    brew install tree
  else
    # Linux installation
    apt=`command -v apt-get`
    yum=`command -v yum`
    
    if [ -n "$apt" ]; then
      # Debian/Ubuntu
      sudo apt-get update && sudo apt-get install -y tree
    elif [ -n "$yum" ]; then
      # RHEL/CentOS
      sudo yum install -y tree
    else
      echo "Err: apt or yum not detected."
      exit 1
    fi
  fi
fi

tree externalAdapters
}

########################################################
#                    HELP FUNCTION                     #
########################################################
Help() {
  # Display Help
  echo "This script helps you deploy, manage, and upgrade your Chainlink external adapters."
  echo
  echo "Usage:  ${b}eaManager option EA_NAME EA_VERSION${n}"
  echo ""
  echo "options:"
  echo ""
  echo "-i        Initializes a generic EA environment."
  echo "${b}            Creates Docker network, deploys redis container,${n}"
  echo "${b}            use this if you want a quick turnkey deployment.${n}"
  echo ""
  echo "-d        Deploys new external adapter."
  echo "${b}            ex: eaManager -d coingecko 1.0.4${n}"
  echo ""
  echo "-u        Upgrades external adapter."
  echo "${b}            ex: eaManager -u coingecko 1.0.4${n}"
  echo ""
  echo "-t        Send a test request to external adapter."
  echo "${b}            ex: eaManager -t \$coingecko_redis LINK USD${n}"
  echo ""
  echo "-v        Print script version and exit."
  echo ""
  echo "-l        Print all supported EA names and exit."
  echo ""
  echo "-h        Print this Help function and exit."
  echo
}

########################################################
#                        MAIN                          #
########################################################
while getopts ":id:u:t:lvh" option; do
   case ${option} in
      i) # deploy new external adapter
         Initialize
         exit
         ;;
      d) # deploy new external adapter
         shift
         Deploy "$@"
         exit
         ;;
      u) # upgrade existing external adapter
         shift
         Upgrade "$@"
         exit
         ;;
      t) # send test request to existing external adapter
         shift
         Test "$@"
         exit
         ;;
      v) # Print Version
         Version
         exit
         ;;
      l) # list supported EAs
         List
         exit
         ;;
      h) # Display Help
         Help
         exit
         ;;
      \?) # Invalid Option
         echo "Invalid option: $OPTARG" 1>&2
         exit 1
         ;;
      :) # Invalid Option
         echo "Invalid option: $OPTARG requires an argument" 1>&2
         echo ""
         echo "Please specify the external adapter name" 1>&2
         echo "ex: ${b}eaManager -$OPTARG coingecko${n}" 1>&2
         exit 1
         ;;
   esac
done